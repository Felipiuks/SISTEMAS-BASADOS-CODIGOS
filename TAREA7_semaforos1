#include <stdio.h>
#include "board.h"
#include "peripherals.h"
#include "pin_mux.h"
#include "clock_config.h"
#include "MK64F12.h"
#include "fsl_debug_console.h"
#include "FreeRTOS.h"
#include "task.h"
#include "fsl_port.h"
#include "fsl_gpio.h"
#include "semphr.h"
/* TODO: insert other include files here. */

/* TODO: insert other definitions and declarations here. */

/*
 * @brief   Application entry point.
 */
SemaphoreHandle_t g_led_semaphore_COUNTER;
SemaphoreHandle_t b_led_semaphore_BINARY;

void PORTC_IRQHandler()
{
	BaseType_t xHigherPriorityTaskWoken;
	PORT_ClearPinsInterruptFlags(PORTC, 1<<6);
	xHigherPriorityTaskWoken = pdFALSE;
	xSemaphoreGiveFromISR( g_led_semaphore_COUNTER, &xHigherPriorityTaskWoken );
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
}

void PORTA_IRQHandler()
{
	BaseType_t xHigherPriorityTaskWoken;
	PORT_ClearPinsInterruptFlags(PORTA, 1<<4);
	xHigherPriorityTaskWoken = pdFALSE;
	xSemaphoreGiveFromISR( b_led_semaphore_BINARY, &xHigherPriorityTaskWoken );
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
}

void blue_led_task(void *arg)
{
	for(;;)
	{
		xSemaphoreTake(b_led_semaphore_BINARY,portMAX_DELAY);
		GPIO_TogglePinsOutput(GPIOB,1<<21);
	}
}

void green_led_task(void *arg)
{

	for(;;)
	{
		xSemaphoreTake(g_led_semaphore_COUNTER,portMAX_DELAY);
		UBaseType_t uxSemaphoreGetCount(SemaphoreHandle_t xSemaphore);
		if(10 == xSemaphore)
		{
		GPIO_TogglePinsOutput(GPIOE,1<<26);
		}
	}
}

int main(void) {

  	/* Init board hardware. */
    BOARD_InitBootPins();
    BOARD_InitBootClocks();
    BOARD_InitBootPeripherals();
  	/* Init FSL debug console. */
    BOARD_InitDebugConsole();

    CLOCK_EnableClock(kCLOCK_PortB);
    CLOCK_EnableClock(kCLOCK_PortE);
    CLOCK_EnableClock(kCLOCK_PortC);
    CLOCK_EnableClock(kCLOCK_PortA);

    port_pin_config_t config_led =
    	{ kPORT_PullDisable, kPORT_SlowSlewRate, kPORT_PassiveFilterDisable,
    	kPORT_OpenDrainDisable, kPORT_LowDriveStrength, kPORT_MuxAsGpio,
    	kPORT_UnlockRegister, };

    port_pin_config_t config_switch =
    	{ kPORT_PullDisable, kPORT_SlowSlewRate, kPORT_PassiveFilterDisable,
    	kPORT_OpenDrainDisable, kPORT_LowDriveStrength, kPORT_MuxAsGpio,
    	kPORT_UnlockRegister};

    PORT_SetPinConfig(PORTB, 21, &config_led);
    PORT_SetPinConfig(PORTE, 26, &config_led);

    PORT_SetPinInterruptConfig(PORTA, 4, kPORT_InterruptFallingEdge);
    PORT_SetPinInterruptConfig(PORTC, 6, kPORT_InterruptFallingEdge);


    PORT_SetPinConfig(PORTA, 4, &config_switch);
    PORT_SetPinConfig(PORTC, 6, &config_switch);

	gpio_pin_config_t led_config_gpio =
	{ kGPIO_DigitalOutput, 1 };

	GPIO_PinInit(GPIOB, 21, &led_config_gpio);
	GPIO_PinInit(GPIOE, 26, &led_config_gpio);

	gpio_pin_config_t switch_config_gpio =
	{ kGPIO_DigitalInput, 1 };

	GPIO_PinInit(GPIOA, 4, &switch_config_gpio);
	GPIO_PinInit(GPIOC, 6, &switch_config_gpio);

	NVIC_EnableIRQ(PORTA_IRQn);
	NVIC_EnableIRQ(PORTC_IRQn);

	NVIC_SetPriority(PORTA_IRQn,5);
	NVIC_SetPriority(PORTC_IRQn,5);

	GPIO_WritePinOutput(GPIOB,21,1);
	GPIO_WritePinOutput(GPIOE,26,1);

	b_led_semaphore_BINARY = xSemaphoreCreateBinary();
	g_led_semaphore_COUNTER = xSemaphoreCreateCounting(10,0);

	xTaskCreate(blue_led_task, "BLUE LED task", configMINIMAL_STACK_SIZE, NULL, configMAX_PRIORITIES-1, NULL);
	xTaskCreate(green_led_task, "GREEN LED task", configMINIMAL_STACK_SIZE, NULL, configMAX_PRIORITIES-2, NULL);

	vTaskStartScheduler();

    while(1) {

    }
    return 0 ;
}
